{"version":3,"sources":["components/Navbar/Navbar.js","components/Modal/Modal.js","components/CardClicked/CardClicked.js","components/Footer/Footer.js","App.js","RegisterServiceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","style","background","cursor","onClick","document","getElementsByClassName","classList","remove","href","paddingRight","score","paddingLeft","topScore","Modal","add","ClickCard","reArrangeCards","clickedCharacter","id","handleClick","alt","name","src","image","Footer","backgroundColor","text","App","state","cards","clickedCards","footerText","_document$getElements","getElementsByTagName","pageBody","Object","slicedToArray","_this","includes","setState","setTimeout","concat","toConsumableArray","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","renderCards","map","card","key","CardClicked_CardClicked","Navbar_Navbar","this","components_Modal_Modal","Footer_Footer","Component","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","origin","addEventListener","swUrl","fetch","then","response","contentType","headers","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App","getElementById","RegisterServiceWorker"],"mappings":"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","file":"static/js/main.ac889dc0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Navbar(props) {\r\n\treturn(\r\n\t<div className=\"navbar-fixed\">\r\n\t\t<nav style={{background:\"blue\"}}>\r\n\t\t\t {/* create a modal for Instructions.   */}\r\n\t\t\t<div className=\"nav-wrapper container\">\r\n\t\t\t\t<button style={{cursor: 'pointer'}}className='left' onClick={() => \r\n\t\t\t\t//on click function to hide the modal \r\n\t\t\t\t\t{document.getElementsByClassName('instructionsModal')[0].classList.remove('hide');\r\n\t\t\t\t}}>Instructions</button>\r\n\t\t\t\t{/* refresh the page when clicked */}\r\n\t\t\t\t<a href=\"/\" className='brand-logo center'>Clicky Game</a>\r\n\t\t\t\t<ul className='right'>\r\n\t\t\t\t\t<li style={{paddingRight: \"20px\"}}>Score: {props.score}</li>\r\n\t\t\t\t\t<li style={{paddingLeft: \"20px\"}}>Top Score: {props.topScore}</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t</div>\r\n\t)\r\n}\r\n//export element navbar\r\nexport default Navbar;","import React from 'react';\r\nimport './Modal.css';\r\n\r\nfunction Modal() {\r\n\treturn (\r\n\t\t// returns to Navbar.js\r\n\t\t<div className=\"instructionsModal\">\r\n\t\t\t<div className=\"modal-content\">\r\n\t\t\t\t<h4 className=\"center\">Instructions</h4>\r\n\t\t\t\t<ol>\r\n\t\t\t\t\t<li>Click on an Image to start the game.</li>\r\n\t\t\t\t\t<li>When you click an image, all images get rearranged.</li>\r\n\t\t\t\t\t<li>If you pick the same image twice...You're a looser!</li>\r\n\t\t\t\t\t<li>Click all 12 images once...You're Win!</li>\r\n\t\t\t\t</ol>\r\n\t\t\t</div>\r\n\t\t\t<br />\r\n\t\t\t<div className=\"modal-footer white-text center\">\r\n\t\t\t\t<button className=\"waves-effect waves-light btn\" onClick={() => {\r\n\t\t\t\t\tdocument.getElementsByClassName('instructionsModal')[0].classList.add('hide');\r\n\t\t\t\t}}>Let's Play!</button>\r\n\t\t\t</div>\t\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Modal;","import React from 'react';\r\nimport './CardClicked.css';\r\n\r\n//everytime a card is clicked run handle click, pass in components and properties\r\nfunction handleClick(props) {\r\n\tprops.reArrangeCards();\r\n\tprops.clickedCharacter(props.id);\r\n}\r\n\r\n//when the card is clicked handle click seperatly\r\n//props passed in from cards.json\r\nfunction ClickCard(props) {\r\n\treturn (\r\n\t\t<div className=\"card img-container\" onClick={() => handleClick(props)}>\r\n\t\t\t<img alt={props.name} src={props.image} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\n\r\n\r\nexport default ClickCard","import React from 'react';\r\n\r\nfunction Footer(props) {\r\n  return (\r\n    <footer style={{backgroundColor: \"blue\"}} className=\"page-footer\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <h5 className=\"center white-text footer-update\">{props.text}</h5>\r\n        </div>\r\n      </div>\r\n\r\n        <div className=\"container center\">\r\n        </div>\r\n   \r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;","// render different images (of your choice) to the screen.\n//  Each image should listen for click events.\n//The application should keep track of the user's score. \n//The user's score should be incremented when clicking an image for the first time. The user's score should be reset to 0 if they click the same image more than once.\n//Every time an image is clicked, the images rendered to the page should shuffle themselves in a random order.\n//Once the user's score is reset after an incorrect guess, the game should restart.\n// import files\nimport React, { Component } from 'react';\nimport Navbar from './components/Navbar/Navbar.js';\nimport Modal from './components/Modal/Modal.js';\nimport ClickCard from './components/CardClicked/CardClicked';\nimport Footer from './components/Footer/Footer.js';\nimport cards from './cards.json';\n\nimport './index.css';\n\n//create app with the object state for each propery\nclass App extends Component {\n  state = {\n      cards: cards,\n      score: 0,\n      topScore: 0,\n      clickedCards: [],\n      footerText: \"\"\n    }\n//get each card by id\n  clickedCharacter = (id) => {\n    const [pageBody] = document.getElementsByTagName('body');\n//if the card is clicked setState update score to 0 and emptys array\n    if (this.state.clickedCards.includes(id)) {\n      this.setState({score: 0, clickedCards: []})\n//handles shakeWrapper when the user picks the image more than once\n      pageBody.classList.add('shakeWrapper')\n      this.setState({footerText: 'You picked that already! Now you start Over.'})\n      setTimeout(() => {\n        pageBody.classList.remove('shakeWrapper');\n      }, 500);\n      setTimeout(() => {\n        this.setState({footerText: \"\"})\n      }, 1800)\n//else save clicked card to array and update, adding to the score\n    } else {\n      this.setState({clickedCards: [...this.state.clickedCards, id]})\n      this.setState({score: this.state.score + 1})\n      if (this.state.score >= this.state.topScore) {\n        this.setState({topScore: this.state.score + 1})\n\n      } \n      //if the score is equal to 11 update state, set score back to zero, empty array, import cards and show text in footer\n      if (this.state.score === 11) {\n        this.setState({footerText: 'You Won! Play again?'})\n        this.setState({score: 0, clickedCards: [], cards: cards})\n        setTimeout(() => {\n          this.setState({footerText: ''})\n        }, 1800)\n      } \n    }\n  }\n//Every time an image is clicked, the images rendered to the page should shuffle themselves in a random order.\n  reArrangeCards = (array) => {\n    let currentIndex = array.length;\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({cards:cards});\n  }\n//renders the cards that have been clicked\n  renderCards = (array) => {\n    return this.state.cards.map(card => (\n      <section className='col s4 m3 l3' key={card.id} id={card.id}>\n        <ClickCard\n          name={card.name} \n          image={card.image} \n          reArrangeCards={() => {this.reArrangeCards(this.state.cards)}}\n          clickedCharacter={() => {this.clickedCharacter(card.id)}}/>\n      </section>\n      )\n    )\n  }\n\n//rendering the navbar and modal passing in the necessary properties\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Navbar score={this.state.score} topScore={this.state.topScore}/>\n        <Modal />\n        <br />\n        <div className=\"container row cardWrapper\">\n          {this.renderCards(this.state.cards)}\n        </div>\n        <Footer text={this.state.footerText}/>\n      </div>\n    );\n  }\n}\n//eport class app\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as RegisterServiceWorker from './RegisterServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nReactDOM.render(<App />, document.getElementById('root'));\nRegisterServiceWorker(); "],"sourceRoot":""}